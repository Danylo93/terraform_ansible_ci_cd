name: CI/CD Pipeline

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Cache Terraform Directory
      uses: actions/cache@v2
      with:
        path: terraform/.terraform
        key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}
        restore-keys: |
          ${{ runner.os }}-terraform-

    - name: Terraform Init
      run: cd terraform && terraform init

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        audience: sts.amazonaws.com
        managed-session-policies: |
          - arn:aws:iam::aws:policy/AdministratorAccess


    - name: Terraform Plan
      run: cd terraform && terraform plan -out=tfplan

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: cd terraform && terraform apply -auto-approve tfplan

    - name: Set EC2 Host Environment Variable
      run: echo "EC2_HOST=$(terraform output -raw aws_instance_e_ssh)" >> $GITHUB_ENV

    - name: Get Terraform Output
      id: terraform_output
      run: echo "EC2_HOST=$(terraform output -raw aws_instance_e_ssh)" >> $GITHUB_ENV

    - name: Create Ansible Inventory Directory
      run: mkdir -p ansible

    - name: Create Ansible Inventory File
      run: |
        echo "[ec2]" > ansible/inventory
        echo "$EC2_HOST" >> ansible/inventory
      env:
        EC2_HOST: ${{ steps.terraform_output.outputs.ec2_host }}



    - name: Ansible Playbook
      run: ansible-playbook -i ansible/hosts ansible/provisionar.yml
